{"version":3,"sources":["angular-slick.coffee","angular-slick.js"],"names":["angular","module","directive","$timeout","restrict","scope","initOnload","data","currentIndex","accessibility","adaptiveHeight","autoplay","autoplaySpeed","arrows","asNavFor","appendArrows","prevArrow","nextArrow","centerMode","centerPadding","cssEase","customPaging","dots","draggable","fade","focusOnSelect","easing","edgeFriction","infinite","initialSlide","lazyLoad","mobileFirst","pauseOnHover","pauseOnDotsHover","respondTo","responsive","slide","slidesToShow","slidesToScroll","speed","swipe","swipeToSlide","touchMove","touchThreshold","useCSS","variableWidth","vertical","rtl","onAfterChange","onBeforeChange","onEdge","onInit","onReInit","onSetPosition","onSwipe","link","$scope","elem","attrs","currentIndexWatch","destroySlick","initializeSlick","isInitialized","slider","$watch","slick","$","find","remove","index","parseInt","Number","on","e","event","$apply","nextIndex","direction","onReinit","newValue","oldValue","newVal","oldVal"],"mappings":"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","file":"angular-slick.js","sourcesContent":["\nangular.module('angular-slick', [])\n    .directive 'slick', [\n        '$timeout'\n\n        ($timeout)->\n            restrict: 'AEC'\n            scope:\n                initOnload: \"@\"\n                data: \"=\"\n                currentIndex: \"=\"\n\n                # Properties\n                accessibility: \"@\"\n                adaptiveHeight: \"@\"\n                autoplay: \"@\"\n                autoplaySpeed: \"@\"\n                arrows: \"@\"\n                asNavFor: \"@\"\n                appendArrows: \"@\"\n                prevArrow: \"@\"\n                nextArrow: \"@\"\n                centerMode: \"@\"\n                centerPadding: \"@\"\n                cssEase: \"@\"\n                customPaging: \"&\"\n                dots: \"@\"\n                draggable: \"=\"\n                fade: \"@\"\n                focusOnSelect: \"@\"\n                easing: \"@\"\n                edgeFriction: \"@\"\n                infinite: \"@\"\n                initialSlide: \"=\"\n                lazyLoad: \"@\"\n                mobileFirst: \"@\"\n                pauseOnHover: \"@\"\n                pauseOnDotsHover: \"@\"\n                respondTo: \"@\"\n                responsive: \"=\"\n                slide: \"@\"\n                slidesToShow: \"@\"\n                slidesToScroll: \"@\"\n                speed: \"@\"\n                swipe: \"@\"\n                swipeToSlide: \"@\"\n                touchMove: \"@\"\n                touchThreshold: \"@\"\n                useCSS: \"@\"\n                variableWidth: \"@\"\n                vertical: \"@\"\n                rtl: \"@\"\n\n                # Events\n                onAfterChange: '&'\n                onBeforeChange: '&'\n                onEdge: '&'\n                onInit: '&'\n                onReInit: '&'\n                onSetPosition: '&'\n                onSwipe: '&'\n\n            link: ($scope, elem, attrs)->\n                slider = null\n\n                $scope.$watch 'draggable', ->\n                    return if !slider\n                    return if !$scope.draggable?\n                        \n                    slider.slick('slickSetOption', 'draggable', $scope.draggable, false)\n\n                currentIndexWatch = ->\n\n                destroySlick = ->\n                    $timeout ->\n                        currentIndexWatch()\n\n                        slider = $(elem)\n\n                        slider.slick('unslick')\n                        slider.find('.slick-list').remove()\n                        \n                        return slider\n\n                initializeSlick = ->\n                    $timeout ->\n                        slider = $ elem\n                        customPaging = undefined\n\n                        if attrs.customPaging\n                            customPaging = (slick, index)->\n                                $scope.customPaging { slick: slick, index: index }\n\n                        slider.slick\n                            accessibility: $scope.accessibility isnt 'false'\n                            adaptiveHeight: $scope.adaptiveHeight is 'true'\n                            autoplay: $scope.autoplay is 'true'\n                            autoplaySpeed: if $scope.autoplaySpeed? then parseInt($scope.autoplaySpeed, 10) else 3000\n                            arrows: $scope.arrows isnt 'false'\n                            asNavFor: if $scope.asNavFor then $scope.asNavFor else undefined\n                            appendArrows: if $scope.appendArrows then $($scope.appendArrows) else $(elem)\n                            prevArrow: if $scope.prevArrow then $scope.prevArrow else undefined\n                            nextArrow: if $scope.nextArrow then $scope.nextArrow else undefined\n                            centerMode: $scope.centerMode is 'true'\n                            centerPadding: $scope.centerPadding or '50px'\n                            cssEase: $scope.cssEase or 'ease'\n                            customPaging: customPaging\n                            dots: $scope.dots is 'true'\n                            draggable: if $scope.draggable? then true else $scope.draggable\n                            fade: $scope.fade is 'true'\n                            focusOnSelect: $scope.focusOnSelect is 'true'\n                            easing: $scope.easing or 'linear'\n                            edgeFriction: Number($scope.edgeFriction or 0.15)\n                            infinite: $scope.infinite isnt 'false'\n                            initialSlide:$scope.initialSlide or 0\n                            lazyLoad: $scope.lazyLoad or 'ondemand'\n                            mobileFirst: $scope.mobileFirst is 'true'\n                            pauseOnHover: $scope.pauseOnHover isnt 'false'\n                            pauseOnDotsHover: $scope.pauseOnDotsHover is 'true'\n                            respondTo: $scope.respondTo or 'window'\n                            responsive: $scope.responsive or undefined\n                            slide: $scope.slide or 'div'\n                            slidesToShow: if $scope.slidesToShow? then parseInt($scope.slidesToShow, 10) else 1\n                            slidesToScroll: if $scope.slidesToScroll? then parseInt($scope.slidesToScroll, 10) else 1\n                            speed: if $scope.speed? then parseInt($scope.speed, 10) else 300\n                            swipe: $scope.swipe isnt 'false'\n                            swipeToSlide: $scope.swipeToSlide is 'true'\n                            touchMove: $scope.touchMove isnt 'false'\n                            touchThreshold: if $scope.touchThreshold then parseInt($scope.touchThreshold, 10) else 5\n                            useCSS: $scope.useCSS isnt 'false'\n                            variableWidth: $scope.variableWidth is 'true'\n                            vertical: $scope.vertical is 'true'\n                            rtl: $scope.rtl is 'true'\n\n                        # Events\n                        slider.on 'afterChange', (e, slick, index)->\n                            $scope.onAfterChange(\n                                event: e\n                                slick: slick\n                                index: index\n                            ) if attrs.onAfterChange\n\n                            if $scope.currentIndex?\n                                $scope.$apply ->\n                                    $scope.currentIndex = index\n\n                        slider.on 'beforeChange', (e, slick, currentIndex, nextIndex)->\n                            $scope.onBeforeChange(\n                                event: e\n                                slick: slick\n                                currentIndex: currentIndex\n                                nextIndex: nextIndex\n                            ) if attrs.onBeforeChange\n\n                        slider.on 'edge', (e, slick, direction)->\n                            $scope.onEdge(\n                                event: e\n                                slick: slick\n                                direction: direction\n                            ) if attrs.onEdge\n\n                        slider.on 'init', (e, slick)->\n                            $scope.onInit(\n                                event: e\n                                slick: slick\n                            ) if attrs.onInit\n\n                        slider.on 'reInit', (e, slick)->\n                            $scope.onReinit(\n                                event: e\n                                slick: slick\n                            ) if attrs.onReinit\n\n                        slider.on 'setPosition', (e, slick)->\n                            $scope.onSetPosition(\n                                event: e\n                                slick: slick\n                            ) if attrs.onSetPosition\n\n                        slider.on 'swipe', (e, slick, direction)->\n                            $scope.onSwipe(\n                                event: e\n                                slick: slick\n                                direction: direction\n                            ) if attrs.onSwipe\n\n                        # Watch Functions\n                        currentIndexWatch = $scope.$watch 'currentIndex', (newValue, oldValue)->\n                            if newValue?\n                                slider.slick 'slickGoTo', newValue\n\n\n                if $scope.initOnload\n                    isInitialized = false\n\n                    $scope.$watch 'data', (newVal, oldVal)->\n                        if newVal?\n                            destroySlick() if isInitialized\n                            initializeSlick()\n                            isInitialized = true\n                else\n                    initializeSlick()\n    ]","angular.module('angular-slick', []).directive('slick', [\n  '$timeout', function($timeout) {\n    return {\n      restrict: 'AEC',\n      scope: {\n        initOnload: \"@\",\n        data: \"=\",\n        currentIndex: \"=\",\n        accessibility: \"@\",\n        adaptiveHeight: \"@\",\n        autoplay: \"@\",\n        autoplaySpeed: \"@\",\n        arrows: \"@\",\n        asNavFor: \"@\",\n        appendArrows: \"@\",\n        prevArrow: \"@\",\n        nextArrow: \"@\",\n        centerMode: \"@\",\n        centerPadding: \"@\",\n        cssEase: \"@\",\n        customPaging: \"&\",\n        dots: \"@\",\n        draggable: \"=\",\n        fade: \"@\",\n        focusOnSelect: \"@\",\n        easing: \"@\",\n        edgeFriction: \"@\",\n        infinite: \"@\",\n        initialSlide: \"=\",\n        lazyLoad: \"@\",\n        mobileFirst: \"@\",\n        pauseOnHover: \"@\",\n        pauseOnDotsHover: \"@\",\n        respondTo: \"@\",\n        responsive: \"=\",\n        slide: \"@\",\n        slidesToShow: \"@\",\n        slidesToScroll: \"@\",\n        speed: \"@\",\n        swipe: \"@\",\n        swipeToSlide: \"@\",\n        touchMove: \"@\",\n        touchThreshold: \"@\",\n        useCSS: \"@\",\n        variableWidth: \"@\",\n        vertical: \"@\",\n        rtl: \"@\",\n        onAfterChange: '&',\n        onBeforeChange: '&',\n        onEdge: '&',\n        onInit: '&',\n        onReInit: '&',\n        onSetPosition: '&',\n        onSwipe: '&'\n      },\n      link: function($scope, elem, attrs) {\n        var currentIndexWatch, destroySlick, initializeSlick, isInitialized, slider;\n        slider = null;\n        $scope.$watch('draggable', function() {\n          if (!slider) {\n            return;\n          }\n          if ($scope.draggable == null) {\n            return;\n          }\n          return slider.slick('slickSetOption', 'draggable', $scope.draggable, false);\n        });\n        currentIndexWatch = function() {};\n        destroySlick = function() {\n          return $timeout(function() {\n            currentIndexWatch();\n            slider = $(elem);\n            slider.slick('unslick');\n            slider.find('.slick-list').remove();\n            return slider;\n          });\n        };\n        initializeSlick = function() {\n          return $timeout(function() {\n            var customPaging;\n            slider = $(elem);\n            customPaging = void 0;\n            if (attrs.customPaging) {\n              customPaging = function(slick, index) {\n                return $scope.customPaging({\n                  slick: slick,\n                  index: index\n                });\n              };\n            }\n            slider.slick({\n              accessibility: $scope.accessibility !== 'false',\n              adaptiveHeight: $scope.adaptiveHeight === 'true',\n              autoplay: $scope.autoplay === 'true',\n              autoplaySpeed: $scope.autoplaySpeed != null ? parseInt($scope.autoplaySpeed, 10) : 3000,\n              arrows: $scope.arrows !== 'false',\n              asNavFor: $scope.asNavFor ? $scope.asNavFor : void 0,\n              appendArrows: $scope.appendArrows ? $($scope.appendArrows) : $(elem),\n              prevArrow: $scope.prevArrow ? $scope.prevArrow : void 0,\n              nextArrow: $scope.nextArrow ? $scope.nextArrow : void 0,\n              centerMode: $scope.centerMode === 'true',\n              centerPadding: $scope.centerPadding || '50px',\n              cssEase: $scope.cssEase || 'ease',\n              customPaging: customPaging,\n              dots: $scope.dots === 'true',\n              draggable: $scope.draggable != null ? true : $scope.draggable,\n              fade: $scope.fade === 'true',\n              focusOnSelect: $scope.focusOnSelect === 'true',\n              easing: $scope.easing || 'linear',\n              edgeFriction: Number($scope.edgeFriction || 0.15),\n              infinite: $scope.infinite !== 'false',\n              initialSlide: $scope.initialSlide || 0,\n              lazyLoad: $scope.lazyLoad || 'ondemand',\n              mobileFirst: $scope.mobileFirst === 'true',\n              pauseOnHover: $scope.pauseOnHover !== 'false',\n              pauseOnDotsHover: $scope.pauseOnDotsHover === 'true',\n              respondTo: $scope.respondTo || 'window',\n              responsive: $scope.responsive || void 0,\n              slide: $scope.slide || 'div',\n              slidesToShow: $scope.slidesToShow != null ? parseInt($scope.slidesToShow, 10) : 1,\n              slidesToScroll: $scope.slidesToScroll != null ? parseInt($scope.slidesToScroll, 10) : 1,\n              speed: $scope.speed != null ? parseInt($scope.speed, 10) : 300,\n              swipe: $scope.swipe !== 'false',\n              swipeToSlide: $scope.swipeToSlide === 'true',\n              touchMove: $scope.touchMove !== 'false',\n              touchThreshold: $scope.touchThreshold ? parseInt($scope.touchThreshold, 10) : 5,\n              useCSS: $scope.useCSS !== 'false',\n              variableWidth: $scope.variableWidth === 'true',\n              vertical: $scope.vertical === 'true',\n              rtl: $scope.rtl === 'true'\n            });\n            slider.on('afterChange', function(e, slick, index) {\n              if (attrs.onAfterChange) {\n                $scope.onAfterChange({\n                  event: e,\n                  slick: slick,\n                  index: index\n                });\n              }\n              if ($scope.currentIndex != null) {\n                return $scope.$apply(function() {\n                  return $scope.currentIndex = index;\n                });\n              }\n            });\n            slider.on('beforeChange', function(e, slick, currentIndex, nextIndex) {\n              if (attrs.onBeforeChange) {\n                return $scope.onBeforeChange({\n                  event: e,\n                  slick: slick,\n                  currentIndex: currentIndex,\n                  nextIndex: nextIndex\n                });\n              }\n            });\n            slider.on('edge', function(e, slick, direction) {\n              if (attrs.onEdge) {\n                return $scope.onEdge({\n                  event: e,\n                  slick: slick,\n                  direction: direction\n                });\n              }\n            });\n            slider.on('init', function(e, slick) {\n              if (attrs.onInit) {\n                return $scope.onInit({\n                  event: e,\n                  slick: slick\n                });\n              }\n            });\n            slider.on('reInit', function(e, slick) {\n              if (attrs.onReinit) {\n                return $scope.onReinit({\n                  event: e,\n                  slick: slick\n                });\n              }\n            });\n            slider.on('setPosition', function(e, slick) {\n              if (attrs.onSetPosition) {\n                return $scope.onSetPosition({\n                  event: e,\n                  slick: slick\n                });\n              }\n            });\n            slider.on('swipe', function(e, slick, direction) {\n              if (attrs.onSwipe) {\n                return $scope.onSwipe({\n                  event: e,\n                  slick: slick,\n                  direction: direction\n                });\n              }\n            });\n            return currentIndexWatch = $scope.$watch('currentIndex', function(newValue, oldValue) {\n              if (newValue != null) {\n                return slider.slick('slickGoTo', newValue);\n              }\n            });\n          });\n        };\n        if ($scope.initOnload) {\n          isInitialized = false;\n          return $scope.$watch('data', function(newVal, oldVal) {\n            if (newVal != null) {\n              if (isInitialized) {\n                destroySlick();\n              }\n              initializeSlick();\n              return isInitialized = true;\n            }\n          });\n        } else {\n          return initializeSlick();\n        }\n      }\n    };\n  }\n]);\n\n"]}